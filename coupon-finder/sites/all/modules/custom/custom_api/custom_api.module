<?php

function custom_api_menu() {
  $items = array();

  $items['add-product/%'] = array(//this creates a URL that will call this form at "examples/form-example"
      'title' => 'Add Product in database', //page title
      'page callback' => 'custom_api_addproduct', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
      'page arguments' => array(1),
      'access callback' => TRUE
  );

  return $items;
}




function custom_api_addproduct($ProInfo){
    //print_r($_REQUEST['url']);
    
    //die;
    //$baseUrl = base64_decode( ($ProInfo) );
    $baseUrl = $_REQUEST['url'];
    
    if($_REQUEST['recheck'] == 1){
      $Pageurl = "http://54.243.150.171/CouponAutoWebPhase2.php?q=" .  $baseUrl ;
      $url = "http://54.243.150.171/CouponAutoWebPhase2Recheck.php?q=" . urldecode( $baseUrl );
      //http://54.243.150.171/CouponAutoWebPhase2Recheck.php?q=http://www.firstcry.com/zeme-organics/maternity-top-orange/61968/product-detail
      $node_url = $base_url.drupal_get_path_alias('node/'.$_REQUEST['id']);
    }else{
      $Pageurl = "http://54.243.150.171/nodeCreation.php";    
      $url = "http://54.243.150.171/nodeCreation.php";
      
    }
    
    $json = drupal_http_request($url, array('timeout' => 600.0));
    if ( $json == 'done') {echo "done"; exit;}
    
	/** ASHISH NODE CREATION TIMING  - DATA REVEIVED*/
		$time1 = round(microtime(true)* 1000);
	echo nl2br("\n");
		echo 'Data Received: '.$time1;
	echo nl2br("\n");
	/** -----------------------------------------   */
	
	
	
	$json = $json->data;
    
    $jsonArr = json_decode($json,true);
    
	
	
    foreach($jsonArr as $json){
    
        
    $json = json_encode($json); 
    $jsonData = preg_replace("/[\\n\\r]+/", " ", $json);
    $jsonArray = json_decode($jsonData);
 //   echo $jsonArray->header->BaseUrl. "</br>";
    
    
    /**added by sanjay*/
    //if($jsonArray->header->Use == 1 || $jsonArray->header->Use == 0){
    if($jsonArray->header->Use == 1){
      //$proTitle = $jsonArray->header->ProductName;
      $proTitle = $jsonArray->header->PageTitle;
      
      $baseUrl = $jsonArray->header->BaseUrl;
      
      $query = db_select('field_data_field_base_url', 'n')
		   ->fields('n', array('ntity_id') )
		   ->condition('n.field_base_url_value', $baseUrl, '=')
		   ->countQuery();
      $result = $query->execute();
      $record = $result->fetch();
      
	  	/** ASHISH NODE CREATION TIMING  - NODE FETCHED*/
		$time1 = round(microtime(true)* 1000);
		echo 'Node Fetched: '.$time1;
	echo nl2br("\n");
		/** -----------------------------------------   */

	  
	  
      
      $brand_name = $jsonArray->header->ProductBrand;
	 // $Query = db_query("SELECT tid FROM taxonomy_term_data WHERE vid = 4 and name = '$brand_name' ");
	  $Query=db_query('SELECT ttd.tid FROM {taxonomy_term_data} AS ttd WHERE ttd.vid = 4 and ttd.name = :brand_name', array(':brand_name' => $brand_name));
	  $Ruery = $Query->fetch();
	  $BrandId = $Ruery->tid;

	  /** ASHISH NODE CREATION TIMING  - BRAND CHECKED*/
		$time1 = round(microtime(true)* 1000);
		echo 'Brand CHecked: '.$time1;
	echo nl2br("\n");
		/** -----------------------------------------   */
	  
      //$brand_name = 'nike';
      // $vocabulary_name = 'brand';
      // $BrandId = coupons_get_term_from_name($brand_name, $vocabulary_name);
      
	  //echo '===='.$brand_name;
      if($BrandId == ''){
	$BrandId = coupons_create_taxonomy_term($brand_name, 4);
      }

	  	/** ASHISH NODE CREATION TIMING  - Brand Created*/
		$time1 = round(microtime(true)* 1000);
		echo 'Brand Created: '.$time1;
	echo nl2br("\n");
		/** -----------------------------------------   */
      

      if($record->expression == 0){
	//echo 'add';
	//die;
	$node = new stdClass();
	$node->language = LANGUAGE_NONE;
	$node->type     = '_product_and_coupon';	
	$node->uid      = 1;
    
	$node->field_category['und'][0]['tid']			= trim( $jsonArray->header->Category );;
	//$node->field_category['und'][0]['tid']			= 1;
	
	$node->title    				  	= $proTitle;
	$node->field_description['und']['0'][value]	 	  	= trim( $jsonArray->header->ProductDescription );
	$node->field_product_price['und']['0'][value]	  	= ( $jsonArray->header->ListingProductPrice )?$jsonArray->header->ListingProductPrice:0;
	//$node->field_product_price['und']['0'][value]	  	= 10;
	//$node->field_retailer['und']['0']['tid'] 		  	= ($jsonArray->header->Retailer > 0)?$jsonArray->header->Retailer:1;
	$node->field_retailer['und']['0']['tid'] 		  	= $jsonArray->header->Retailer;
	//$node->field_retailer['und']['0']['tid'] 		  	= 1;
	$node->field_base_url['und']['0'][value] 		  	= trim( $jsonArray->header->BaseUrl);
	$node->field_retailer_product_name['und']['0'][value] 	= trim( $jsonArray->header->ProductName );
	$node->field_product_image['und']['0'][value] 	  	= trim( $jsonArray->header->ProductImage );
	$node->field_brand['und']['0']['tid'] 		  	= trim($jsonArray->header->ProductBrand);
	$node->field_brand['und']['0']['tid'] 		  	= $BrandId;
	
	$node->field_mrpproductprice['und']['0'][value]	  	= ($jsonArray->header->MRPProductPrice!='')?$jsonArray->header->MRPProductPrice:0 ;
	//$node->field_mrpproductprice['und']['0'][value]	  	= 0 ;
	$expDate = explode('=' , $jsonArray->header->LastCheckedTime);	
	$node->field_lastcheckedtime['und']['0'][value]	  	= $expDate[0];
	$node->field_affiliateurl['und']['0'][value]	  	= trim( $jsonArray->header->AffiliateURL );
	$node->body['und']['0'][value]			  	= trim( $jsonArray->header->MetaDescription );
	///$node->metatag['und']['0']['data']			= trim( $jsonArray->header->MetaDescription );
	$node->field_best_coupon_description['und']['0'][value]	= trim( $jsonArray->header->bestCouponResult->CouponDesc );
	
	$node->field_best_coupon_status['und']['0'][value]	  	= trim( $jsonArray->header->CouponResult );
	//$node->field_product_popularity['und']['0'][value]	= ( $jsonArray->header->Popularity )?$jsonArray->header->Popularity:0;
	$node->field_product_popularity['und']['0'][value]	  	= $jsonArray->header->Popularity;
	
	///if($jsonArray->header->CouponResult == 1){
	  $node->field_best_coupon_couponcode['und']['0'][value] 	= trim( $jsonArray->header->bestCouponResult->CouponCode );
	  $node->field_best_coupon_saving['und']['0'][value]	= ( $jsonArray->header->bestCouponResult->Saving)?$jsonArray->header->bestCouponResult->Saving:0;
	  $node->field_best_coupon_netpriceafters['und']['0'][value]= ( $jsonArray->header->bestCouponResult->NetPriceAfterSaving)?$jsonArray->header->bestCouponResult->NetPriceAfterSaving:0;
	  $node->field_best_coupon_url['und']['0'][value]		= trim( $jsonArray->header->bestCouponResult->url );
	//}
	//mail('sanjay.kumar1@mail.vinove.com','jsonArray','jsonArray--->'.print_r($jsonArray->data,1));
	$node->field_best_coupon_info['und']['0'][value]		= serialize( $jsonArray->data );
	
	//$node->	field_page_url['und']['0'][value]		= $Pageurl;
	
	/*$ImgPath = $jsonArray->header->ProductImage;
	$ImgFile = pathinfo($ImgPath);         // $file is set to "index.php"
	
	$image = file_get_contents($ImgPath); // string
	$file = file_save_data($image, 'public://'.$ImgFile['basename'] ,FILE_EXISTS_REPLACE);
	$node->field_product_images[LANGUAGE_NONE]['0']['fid'] = $file->fid;*/
	
	node_save($node);
	global $base_url;
	
	/*$urlAlias = $base_url.'/'.drupal_get_path_alias('node/'.$node->nid);
	
	$node2 = node_load( $node->nid );
	$node2->field_page_url['und']['0'][value] = $urlAlias;
	node_save($node2);
	*/
	if( !empty($node->nid) ){
	  $response = json_encode( array('ResponseCode' => '1', 'Response' => 'Node added.', 'URL' => $url, 'BASEURL' => $jsonArray->header->BaseUrl) );
	  echo $response;
	}else{
	  $response = json_encode( array('ResponseCode' => '4', 'Response' => 'Unexpected Error.') );
	  echo $response;
	}
	
      }elseif($record->expression == 1){
	//echo 'update';
	
		/** ASHISH NODE CREATION TIMING  - UPDATE LOOP ENTERED*/
		$time1 = round(microtime(true)* 1000);
		echo 'Update Loop Entered: '.$time1;
	echo nl2br("\n");
		/** -----------------------------------------   */

	
	$expDate = explode('=' , $jsonArray->header->LastCheckedTime);

	//check product exist or not
	$query = db_select('field_data_field_base_url', 'n')
		     ->fields('n', array('entity_id','field_base_url_value') )
		     ->condition('n.field_base_url_value', $baseUrl, '=');		   
	$result = $query->execute();
	$record = $result->fetch();

	$queryLastUpdate = db_select('field_data_field_lastcheckedtime', 'n')
		     ->fields('n', array('field_lastcheckedtime_value') )
		     ->condition('n.entity_id ', $record->entity_id , '=');		   
	$resultLastUpdate = $queryLastUpdate->execute();
	$recordLastUpdate = $resultLastUpdate->fetch();
	
	$lastUpdatedDate = $recordLastUpdate->field_lastcheckedtime_value;
	global $base_url;
	  
	$urlAlias = $base_url.'/'.drupal_get_path_alias('node/'.$record->entity_id);
	
	if( $expDate[0] != $lastUpdatedDate){
	  
  	  	/** ASHISH NODE CREATION TIMING  - LAST UPDATE URL*/
		$time1 = round(microtime(true)* 1000);
		echo 'Last Update Time Loop: '.$time1;
	echo nl2br("\n");
		/** -----------------------------------------   */

	  
	  
/** BY ASHISH REMOVING DUPLICATE THIS IS ALREADY HAPPENING IN THE MAIN LOOP
	  $brand_name = $jsonArray->header->ProductBrand;
	  //$brand_name = 'nike';
	  $vocabulary_name = 'brand';
	  $BrandId = coupons_get_term_from_name($brand_name, $vocabulary_name);
	  if($BrandId == 0){
	    $BrandId = coupons_create_taxonomy_term($brand_name, 4);
	  }
*/	  
	  
	  $node = node_load($record->entity_id);
	  //$node->field_category['und'][0]['tid']			= 1;
	  $node->field_category['und'][0]['tid']			= trim( $jsonArray->header->Category );;
	  
	  $node->title    				  	= $proTitle;
	  $node->field_description['und']['0'][value]	 	= trim( $jsonArray->header->ProductDescription );
	  $node->field_product_price['und']['0'][value]	  	= ( $jsonArray->header->ListingProductPrice )?$jsonArray->header->ListingProductPrice:0;
	  //$node->field_product_price['und']['0'][value]	  	= 10;
	  //$node->field_retailer['und']['0']['tid'] 		  	= ($jsonArray->header->Retailer > 0)?$jsonArray->header->Retailer:1;
	  $node->field_retailer['und']['0']['tid'] 		  	= $jsonArray->header->Retailer;
	  
	  //$node->field_retailer['und']['0']['tid'] 		  	= 1;
	  $node->field_base_url['und']['0'][value] 		  	= trim( $jsonArray->header->BaseUrl);
	  $node->field_retailer_product_name['und']['0'][value] 	= trim( $jsonArray->header->ProductName );
	  $node->field_product_image['und']['0'][value] 	  	= trim( $jsonArray->header->ProductImage );
	  $node->field_brand['und']['0']['tid'] 		  	= trim($jsonArray->header->ProductBrand);
	  $node->field_brand['und']['0']['tid'] 		  	= $BrandId;
	  
	  $node->field_mrpproductprice['und']['0'][value]	  	= ($jsonArray->header->MRPProductPrice!='')?$jsonArray->header->MRPProductPrice:0 ;
	  //$node->field_mrpproductprice['und']['0'][value]	  	= 0 ;
	  
	  $node->field_lastcheckedtime['und']['0'][value]	  	= $expDate[0];
	  $node->field_affiliateurl['und']['0'][value]	  	= trim( $jsonArray->header->AffiliateURL );
	  $node->body['und']['0'][value]			  	= trim( $jsonArray->header->MetaDescription );
	  ///$node->metatag['und']['0']['data']			= trim( $jsonArray->header->MetaDescription );
	  $node->field_best_coupon_description['und']['0'][value]	= trim( $jsonArray->header->bestCouponResult->CouponDesc );
	  
	  $node->field_best_coupon_status['und']['0'][value]	= trim( $jsonArray->header->CouponResult );
	  //$node->field_product_popularity['und']['0'][value]	= ( $jsonArray->header->Popularity )?$jsonArray->header->Popularity:0;
	  $node->field_product_popularity['und']['0'][value]	= $jsonArray->header->Popularity;
	  
	  //if($jsonArray->header->CouponResult == 1){
	    $node->field_best_coupon_couponcode['und']['0'][value] 	= trim( $jsonArray->header->bestCouponResult->CouponCode );
	    $node->field_best_coupon_saving['und']['0'][value]	= ( $jsonArray->header->bestCouponResult->Saving)?$jsonArray->header->bestCouponResult->Saving:0;
	    $node->field_best_coupon_netpriceafters['und']['0'][value]= ( $jsonArray->header->bestCouponResult->NetPriceAfterSaving)?$jsonArray->header->bestCouponResult->NetPriceAfterSaving:0;
	    $node->field_best_coupon_url['und']['0'][value]		= trim( $jsonArray->header->bestCouponResult->url );
	  //}	
	  $node->field_best_coupon_info['und']['0'][value]		= serialize( $jsonArray->data );
	  
	  //$node->field_page_url['und']['0'][value]		= $Pageurl;
	  /*$ImgPath = $jsonArray->header->ProductImage;
	  $ImgFile = pathinfo($ImgPath);         // $file is set to "index.php"
	  
	  $image = file_get_contents($ImgPath); // string
	  $file = file_save_data($image, 'public://'.$ImgFile['basename'] ,FILE_EXISTS_REPLACE);
	  $node->field_product_images[LANGUAGE_NONE]['0']['fid'] = $file->fid;*/

 	  	/** ASHISH NODE CREATION TIMING  - Node Data*/
		$time1 = round(microtime(true)* 1000);
		echo 'Node Data Received: '.$time1;
	echo nl2br("\n");
		/** -----------------------------------------   */

	  
	  node_save_custom_short($node);
	  
	   	  	/** ASHISH NODE CREATION TIMING  - Node Saved*/
		$time1 = round(microtime(true)* 1000);
		echo 'Node Saved: '.$time1;
	echo nl2br("\n");
		/** -----------------------------------------   */

	  
	  /*$urlAlias = $base_url.'/'.drupal_get_path_alias('node/'.$record->entity_id);
	  
	  $node2 = node_load( $record->entity_id );
	  $node2->field_page_url['und']['0'][value] = $urlAlias;
	  node_save($node2);
	  */
	  if( !empty($node->nid) ){
	    $response = json_encode( array('ResponseCode' => '2', 'Response' => 'Node Updated.', 'URL' => $url, 'BASEURL' => $jsonArray->header->BaseUrl) );

		/** NEED TO UNCOMMENT THE LINE BELOW */
			    echo $response;
	  }else{
	    $response = json_encode( array('ResponseCode' => '4', 'Response' => 'Unexpected Error.') );
	    echo $response;
	  }

 	  	/** ASHISH NODE CREATION TIMING  - End Process*/
		$time1 = round(microtime(true)* 1000);
		echo 'End Process: '.$time1;
	echo nl2br("\n");
		echo nl2br("\n");
			echo '___________________________________________'    ;
		/** -----------------------------------------   */

	  
	}else{
	    $response = json_encode( array('ResponseCode' => '3', 'Response' => 'Node Ignored - Node Already Updated.', 'NodeId' => 'test nid') );
	    echo $response;	    
	}
      }	
    } 
    /*end here*/   
     




	 
    if($_REQUEST['recheck'] == 1){
      //mail('sanjay.kumar1@mail.vinove.com', 'node_url', 'node_url'.print_r($node_url,1));
      drupal_goto($node_url);
    }}  
} 

/** START OF BY ASHISH TO MODIFY SEARCH RESULTS BY BOOSTING ON COUPON STATUS AND LAST CHECKED, HIDE WHERE LAST CHECKED IS GREATER THAN THRESHHOLD*/
function custom_api_apachesolr_query_prepare(DrupalSolrQueryInterface $query) {
   $current_time= time()+(5.5*3600);
   $boost_time=$current_time-(34*3600);
   $hide_time=$current_time-(58*3600);
   $solr_boost_time=gmdate('Y-m-d\TH:i:s\Z', $boost_time);
   $solr_hide_time=gmdate('Y-m-d\TH:i:s\Z', $hide_time);
   $solr_time_coupon_boost= "'(itm_field_best_coupon_status:1 AND dm_field_lastcheckedtime:[".$solr_boost_time." TO *])^5'";
   $solr_hide_time_coupon="dm_field_lastcheckedtime:[".$solr_hide_time." TO *]";
//   echo $solr_hide_time_coupon;
   $query->addParam('fq', $solr_hide_time_coupon);
   $query->addParam('bq', $solr_time_coupon_boost);
}
/** END OF BY ASHISH TO MODIFY SEARCH RESULTS BY BOOSTING ON COUPON STATUS AND UPDATE */

/** START OF BY ASHISH TO EDIT NODESAVE FUNCTION TO SAVE TIME*/
function node_save_custom_short($node) {
  $transaction = db_transaction();

  try {
    // Load the stored entity, if any.
    if (!empty($node->nid) && !isset($node->original)) {
      $node->original = entity_load_unchanged('node', $node->nid);
    }
	   	/** ASHISH NODE CREATION TIMING*/
		$time1 = round(microtime(true)* 1000);
		echo 'NODE - STORED ENTITY: '.$time1;
		echo nl2br("\n");
		/** -----------------------------------------   */
		
    field_attach_presave('node', $node);
    global $user;

    // Determine if we will be inserting a new node.
    if (!isset($node->is_new)) {
      $node->is_new = empty($node->nid);
    }
	
    // Set the timestamp fields.
    if (empty($node->created)) {
      $node->created = REQUEST_TIME;
    }
    // The changed timestamp is always updated for bookkeeping purposes,
    // for example: revisions, searching, etc.
    $node->changed = REQUEST_TIME;

    $node->timestamp = REQUEST_TIME;
    $update_node = TRUE;

    // Let modules modify the node before it is saved to the database.
	   	/** ASHISH NODE CREATION TIMING*/
		$time1 = round(microtime(true)* 1000);
		echo 'NODE - BEFORE INVOKE: '.$time1;
		echo nl2br("\n");
		/** -----------------------------------------   */

    module_invoke_all('node_presave', $node);
	   	/** ASHISH NODE CREATION TIMING*/
		$time1 = round(microtime(true)* 1000);
		echo 'NODE - MODULE_INVOKE 1: '.$time1;
		echo nl2br("\n");
		/** -----------------------------------------   */

    module_invoke_all('entity_presave', $node, 'node');
	   	/** ASHISH NODE CREATION TIMING*/
		$time1 = round(microtime(true)* 1000);
		echo 'NODE - MODULE _INVOKE 2: '.$time1;
		echo nl2br("\n");
		/** -----------------------------------------   */

	
	
    if ($node->is_new || !empty($node->revision)) {
      // When inserting either a new node or a new node revision, $node->log
      // must be set because {node_revision}.log is a text column and therefore
      // cannot have a default value. However, it might not be set at this
      // point (for example, if the user submitting a node form does not have
      // permission to create revisions), so we ensure that it is at least an
      // empty string in that case.
      // @todo: Make the {node_revision}.log column nullable so that we can
      // remove this check.
      if (!isset($node->log)) {
        $node->log = '';
      }
    }
    elseif (!isset($node->log) || $node->log === '') {
      // If we are updating an existing node without adding a new revision, we
      // need to make sure $node->log is unset whenever it is empty. As long as
      // $node->log is unset, drupal_write_record() will not attempt to update
      // the existing database column when re-saving the revision; therefore,
      // this code allows us to avoid clobbering an existing log entry with an
      // empty one.
      unset($node->log);
    }

    // When saving a new node revision, unset any existing $node->vid so as to
    // ensure that a new revision will actually be created, then store the old
    // revision ID in a separate property for use by node hook implementations.
    if (!$node->is_new && !empty($node->revision) && $node->vid) {
      $node->old_vid = $node->vid;
      unset($node->vid);
    }

    // Save the node and node revision.
    if ($node->is_new) {
      // For new nodes, save new records for both the node itself and the node
      // revision.
      drupal_write_record('node', $node);
      _node_save_revision($node, $user->uid);
      $op = 'insert';
    }
    else {
      // For existing nodes, update the node record which matches the value of
      // $node->nid.
      drupal_write_record('node', $node, 'nid');
      // Then, if a new node revision was requested, save a new record for
      // that; otherwise, update the node revision record which matches the
      // value of $node->vid.
      if (!empty($node->revision)) {
        _node_save_revision($node, $user->uid);
      }
      else {
        _node_save_revision($node, $user->uid, 'vid');
        $update_node = FALSE;
      }
      $op = 'update_custom_short';
    }


    if ($update_node) {
      db_update('node')
        ->fields(array('vid' => $node->vid))
        ->condition('nid', $node->nid)
        ->execute();
    }

	   	/** ASHISH NODE CREATION TIMING*/
		$time1 = round(microtime(true)* 1000);
		echo 'NODE - VERSION ID SAVED: '.$time1;
		echo nl2br("\n");
		/** -----------------------------------------   */
	
	
	
    // Call the node specific callback (if any). This can be
    // node_invoke($node, 'insert') or
    // node_invoke($node, 'update').
    node_invoke($node, $op);

		/** ASHISH NODE CREATION TIMING*/
		$time1 = round(microtime(true)* 1000);
		echo 'NODE - NODE INVOKE1: '.$time1;
		echo nl2br("\n");
		/** -----------------------------------------   */

	
    // Save fields.
    $function = "field_attach_$op";
    $function('node', $node);

		/** ASHISH NODE CREATION TIMING*/
		$time1 = round(microtime(true)* 1000);
		echo 'NODE - FIELD SAVED: '.$time1;
		echo nl2br("\n");
		/** -----------------------------------------   */

	
	
    module_invoke_all('node_' . $op, $node);
	
	   	/** ASHISH NODE CREATION TIMING*/
		$time1 = round(microtime(true)* 1000);
		echo 'NODE - MODULE INVOKE 3: '.$time1;
		echo nl2br("\n");
		/** -----------------------------------------   */
	
    module_invoke_all('entity_' . $op, $node, 'node');
	   	/** ASHISH NODE CREATION TIMING*/
		$time1 = round(microtime(true)* 1000);
		echo 'NODE - MODULE INVOKE 4: '.$time1;
		echo nl2br("\n");
		/** -----------------------------------------   */

    // Update the node access table for this node. There's no need to delete
    // existing records if the node is new.
    $delete = $op == 'update';
    node_access_acquire_grants($node, $delete);

    // Clear internal properties.
    unset($node->is_new);
    unset($node->original);
    // Clear the static loading cache.
    entity_get_controller('node')->resetCache(array($node->nid));

    // Ignore slave server temporarily to give time for the
    // saved node to be propagated to the slave.
    db_ignore_slave();

	   	/** ASHISH NODE CREATION TIMING*/
		$time1 = round(microtime(true)* 1000);
		echo 'END OF NODE_SAVE: '.$time1;
		echo nl2br("\n");
		/** -----------------------------------------   */


	}
  catch (Exception $e) {
    $transaction->rollback();
    watchdog_exception('node', $e);
    throw $e;
  }
}
/** END OF BY ASHISH TO EDIT NODESAVE FUNCTION TO SAVE TIME*/


/** START OF BY ASHISH TO EDIT FIELD ATTACH UPDATE FUNCTION TO SAVE TIME*/

function field_attach_update_custom_short($entity_type, $entity) {

    module_invoke_all('entity_' . $op, $node, 'node');
	   	/** ASHISH NODE CREATION TIMING*/
		$time1 = round(microtime(true)* 1000);
		echo 'START OF FIELD_ATTACH: '.$time1;
		echo nl2br("\n");
		/** -----------------------------------------   */


  _field_invoke('update', $entity_type, $entity);

  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);

  // Let any module update field data before the storage engine, accumulating
  // saved fields along the way.
  $skip_fields = array();
  foreach (module_implements('field_storage_pre_update') as $module) {
    $function = $module . '_field_storage_pre_update';
    $function($entity_type, $entity, $skip_fields);

		/** ASHISH NODE CREATION TIMING*/
		$time1 = round(microtime(true)* 1000);
		// var_dump($module);
		echo 'END OF LOOP FOR MODULE: '.$time1;
		echo nl2br("\n");
		/** -----------------------------------------   */
  
  }

  // Collect the storage backends used by the remaining fields in the entities.
  $storages = array();
  foreach (field_info_instances($entity_type, $bundle) as $instance) {
    $field = field_info_field_by_id($instance['field_id']);
    $field_id = $field['id'];
    $field_name = $field['field_name'];
    // Leave the field untouched if $entity comes with no $field_name property,
    // but empty the field if it comes as a NULL value or an empty array.
    // Function property_exists() is slower, so we catch the more frequent
    // cases where it's an empty array with the faster isset().
    if (isset($entity->$field_name) || property_exists($entity, $field_name)) {
      // Collect the storage backend if the field has not been written yet.
      if (!isset($skip_fields[$field_id])) {
        $storages[$field['storage']['type']][$field_id] = $field_id;
      }
    }
  		/** ASHISH NODE CREATION TIMING*/
		$time1 = round(microtime(true)* 1000);
		// var_dump($field);
		echo 'END OF LOOP FOR FIELD '.$field["field_name"].' : '.$time1;
		echo nl2br("\n");
		/** -----------------------------------------   */
  
  }


  
  // Field storage backends save any remaining unsaved fields.
  foreach ($storages as $storage => $fields) {
    $storage_info = field_info_storage_types($storage);
	// var_dump($entity);
	// var_dump($entity->original);
	 //$remove = array_flip($entity->original); 
	//var_dump($remove);
	
		echo nl2br("\n");
		echo nl2br("\n");
		echo nl2br("\n");
		echo nl2br("\n");
		echo nl2br("\n");
		echo nl2br("\n");
echo '-----------------';	
	// 'a' and 'b' are the keys to remove
	 $entity = array_diff_key($entity, $entity->original);
	var_dump($entity);
exit;	
	echo nl2br("\n");
		echo nl2br("\n");
		echo nl2br("\n");
		echo nl2br("\n");
		echo nl2br("\n");
		echo nl2br("\n");
	$entity = array_diff($entity, $entity->original);
	var_dump($entity);
		echo nl2br("\n");
		echo nl2br("\n");
		echo nl2br("\n");
		echo nl2br("\n");
	
	
	die;	
    module_invoke($storage_info['module'], 'field_storage_write', $entity_type, $entity, FIELD_STORAGE_UPDATE, $fields);
  		/** ASHISH NODE CREATION TIMING*/
		$time1 = round(microtime(true)* 1000);
		var_dump($entity);
		//var_dump($storage_info);
		//var_dump($fields);
				echo 'END OF LOOP FOR STORAGE '.$storage_info.' : '.$time1;
		echo nl2br("\n");
		/** -----------------------------------------   */	
  }

  // Let other modules act on updating the entity.
  module_invoke_all('field_attach_update', $entity_type, $entity);

  $entity_info = entity_get_info($entity_type);
  if ($entity_info['field cache']) {
    cache_clear_all("field:$entity_type:$id", 'cache_field');
  }
		/** ASHISH NODE CREATION TIMING*/
		$time1 = round(microtime(true)* 1000);
		echo 'END OF field_attach'.$time1;
		echo nl2br("\n");
		/** -----------------------------------------   */
  }
/** START OF BY ASHISH TO EDIT FIELD ATTACH UPDATE FUNCTION TO SAVE TIME*/


?>
