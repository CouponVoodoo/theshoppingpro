<?php

function custom_api_menu() {
  $items = array();

  $items['add-product/%'] = array(//this creates a URL that will call this form at "examples/form-example"
      'title' => 'Add Product in database', //page title
      'page callback' => 'custom_api_addproduct', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
      'page arguments' => array(1),
      'access callback' => TRUE
  );

  return $items;
}

function custom_api_addproduct($ProInfo){
	

//      print_r($_REQUEST['predictor']);
    
  //    die;
	
    //$baseUrl = base64_decode( ($ProInfo) );
    $baseUrl = $_REQUEST['url'];
	if($_REQUEST['predictor'] == 1){
	  $Pageurl = "http://54.243.150.171/cpnVodo/simulation/predictorNewNodeCreation.php";
      $url = "http://54.243.150.171/cpnVodo/simulation/predictorNewNodeCreation.php";
      $json = drupal_http_request($url, array('timeout' => 1200.0));
	  $json = $json->data;
	  //echo $json;
	 // exit;
	  $jsonArr = json_decode($json,true);
	  foreach($jsonArr as $json){
    	$json = json_encode($json); 
        $jsonData = preg_replace("/[\\n\\r]+/", " ", $json);
        $jsonArray = json_decode($jsonData);
		$brand_name = $jsonArray->Brand;
	 // $Query = db_query("SELECT tid FROM taxonomy_term_data WHERE vid = 4 and name = '$brand_name' ");
	  $Query=db_query('SELECT ttd.tid FROM {taxonomy_term_data} AS ttd WHERE ttd.vid = 4 and ttd.name = :brand_name', array(':brand_name' => $brand_name));
	  $Ruery = $Query->fetch();
	  $BrandId = $Ruery->tid;

      if($BrandId == ''){ 
	   $BrandId = coupons_create_taxonomy_term($brand_name, 4);
	   
      }
		$node = new stdClass();
		$node->language = LANGUAGE_NONE;
		$node->type     = '_product_and_coupon';	
		$node->uid      = 1;
		$node->status      = 1;
		$node->title = trim($jsonArray->Product);
		$node->field_base_url['und']['0'][value] 		  	= trim( $jsonArray->BaseUrl);
		$node->field_brand['und']['0']['tid'] 		  	= $BrandId;
		$node->field_retailer['und']['0']['tid'] 		  	= $jsonArray->RetailerId;
		$node->field_category['und'][0]['tid']			= trim( $jsonArray->Category );
		$node->field_retailer_product_name['und']['0'][value] 	= $jsonArray->Brand.' '.trim( $jsonArray->Product );
		$node->field_description['und']['0'][value]	 	  	= null;
		$node->field_product_price['und']['0'][value]	  	= trim( $jsonArray->ListingPrice );
		$node->field_product_image['und']['0'][value] 	  	= trim( $jsonArray->ProductImage );
		$node->field_mrpproductprice['und']['0'][value]	  	= trim( $jsonArray->MRPprice );
		$node->field_lastcheckedtime['und']['0'][value]	  	= time(); 
		$node->field_affiliateurl['und']['0'][value]	  	= null;
		$node->body['und']['0'][value]			  	= null;
		$node->field_best_coupon_description['und']['0'][value]	= null;
		$node->field_best_coupon_status['und']['0'][value]	  	= null;
		$node->field_best_coupon_saving['und']['0'][value]	= $node->field_mrpproductprice['und']['0'][value]-$node->field_product_price['und']['0'][value];
		$node->field_best_coupon_status_display['und']['0'][value] = null;
		$node->field_product_popularity['und']['0'][value]	  	= null;
		$node->field_best_coupon_couponcode['und']['0'][value] 	= null;
		$node->field_best_coupon_netpriceafters['und']['0'][value]= $node->field_product_price['und']['0'][value];
		$node->field_best_coupon_url['und']['0'][value]		= null;
		$node->field_best_coupon_info['und']['0'][value]		= null;
		
	
		node_save($node);
		$nid=$node->nid;
		db_query("UPDATE {apachesolr_index_entities_node} SET changed = :timestamp WHERE entity_id = :nid", array(':timestamp' => 1365503270, ':nid' => $nid));
		//$node->status = 0;
		//node_save($node);
		$response = json_encode( array('ResponseCode' => '1', 'Response' => 'Node added.', 'URL' => $url, 'BASEURL' => $jsonArray->BaseUrl) );
	  echo $response;
	  }
		return;
    }else if($_REQUEST['recheck'] == 1){
	  $Pageurl = "http://54.243.150.171/CouponAutoWebPhase2.php?q=" .  $baseUrl ;
      $url = "http://54.243.150.171/CouponAutoWebPhase2Recheck.php?q=" . urldecode( $baseUrl );
      $node_url = $base_url.drupal_get_path_alias('node/'.$_REQUEST['id']);
	  
    }else{
      $Pageurl = "http://54.243.150.171/nodeCreation.php";    
      $url = "http://54.243.150.171/nodeCreation.php";
      
    }
	// mail('ashishgupta97065@gmail.com', 'URL', print_r($url));
	// mail('ashishgupta97065@gmail.com', 'URL', print_r($url));
    $json = drupal_http_request($url, array('timeout' => 600.0));
    if ( $json == 'done') {echo "done"; exit;}
    
	/** ASHISH NODE CREATION TIMING  - DATA REVEIVED
		$time1 = round(microtime(true)* 1000);
	echo nl2br("\n");
		echo 'Data Received: '.$time1;
	echo nl2br("\n");
	 -----------------------------------------   */
	
	
	
	$json = $json->data;
   /*if($_REQUEST['recheck'] == 1){
   
   
   if (isset($json->ErrorCode) ) {
      // form_set_error('url', 'Please Click on View Store and check if the product is still in stock.');
     }
}*/
     
    $jsonArr = json_decode($json,true);
    if (isset($jsonArray->data[0]->ErrorCode) && ($jsonArray->data[0]->ErrorCode == "2")) {
        form_set_error('url', 'CouponVoodoo only works with the product page url e.g. http://www.jabong.com/giordano-Victory-Black-P9275-Black-Black-Analog-Watch-168021.html for products that are still in stock. Please recheck if the url you entered is that of a product and if so that the product is still in stock.');
      }

     foreach($jsonArr as $json){
    
	
	
	$json = json_encode($json); 
    $jsonData = preg_replace("/[\\n\\r]+/", " ", $json);
    $jsonArray = json_decode($jsonData);
 //   echo $jsonArray->header->BaseUrl. "</br>";
    
    
    /**added by sanjay*/
    //if($jsonArray->header->Use == 1 || $jsonArray->header->Use == 0){
    if($jsonArray->header->Use == 1){
      //$proTitle = $jsonArray->header->ProductName;
      $proTitle = $jsonArray->header->PageTitle;
      
      $baseUrl = $jsonArray->header->BaseUrl;
      
      $query = db_select('field_data_field_base_url', 'n')
		   ->fields('n', array('ntity_id') )
		   ->condition('n.field_base_url_value', $baseUrl, '=')
		   ->countQuery();
      $result = $query->execute();
      $record = $result->fetch();
      
	  	/** ASHISH NODE CREATION TIMING  - NODE FETCHED
		$time1 = round(microtime(true)* 1000);
		echo 'Node Fetched: '.$time1;
	echo nl2br("\n");
		 -----------------------------------------   */

	  
	  
      
      $brand_name = $jsonArray->header->ProductBrand;
	 // $Query = db_query("SELECT tid FROM taxonomy_term_data WHERE vid = 4 and name = '$brand_name' ");
	  $Query=db_query('SELECT ttd.tid FROM {taxonomy_term_data} AS ttd WHERE ttd.vid = 4 and ttd.name = :brand_name', array(':brand_name' => $brand_name));
	  $Ruery = $Query->fetch();
	  $BrandId = $Ruery->tid;

	  /** ASHISH NODE CREATION TIMING  - BRAND CHECKED
		$time1 = round(microtime(true)* 1000);
		echo 'Brand CHecked: '.$time1;
	echo nl2br("\n");
		 -----------------------------------------   */
	  
      //$brand_name = 'nike';
      // $vocabulary_name = 'brand';
      // $BrandId = coupons_get_term_from_name($brand_name, $vocabulary_name);
      
	  //echo '===='.$brand_name;
      if($BrandId == ''){
	$BrandId = coupons_create_taxonomy_term($brand_name, 4);
      }

	  	/** ASHISH NODE CREATION TIMING  - Brand Created
		$time1 = round(microtime(true)* 1000);
		echo 'Brand Created: '.$time1;
	echo nl2br("\n");
		 -----------------------------------------   */
      

      if($record->expression == 0){
	//echo 'add';
	//die;
	$node = new stdClass();
	$node->language = LANGUAGE_NONE;
	$node->type     = '_product_and_coupon';	
	$node->uid      = 1;
    
	$node->field_category['und'][0]['tid']			= trim( $jsonArray->header->Category );
	$node->field_category['und'][0]['tid']			= trim( $jsonArray->header->Category );
	//$node->field_category['und'][0]['tid']			= 1;
	 
	$node->title    				  	= $proTitle;
	$node->field_description['und']['0'][value]	 	  	= trim( $jsonArray->header->ProductDescription );
	$node->field_product_price['und']['0'][value]	  	= ( $jsonArray->header->ListingProductPrice )?$jsonArray->header->ListingProductPrice:0;
	//$node->field_product_price['und']['0'][value]	  	= 10;
	//$node->field_retailer['und']['0']['tid'] 		  	= ($jsonArray->header->Retailer > 0)?$jsonArray->header->Retailer:1;
	$node->field_retailer['und']['0']['tid'] 		  	= $jsonArray->header->Retailer;
	//$node->field_retailer['und']['0']['tid'] 		  	= 1;
	$node->field_base_url['und']['0'][value] 		  	= trim( $jsonArray->header->BaseUrl);
	$node->field_retailer_product_name['und']['0'][value] 	= trim( $jsonArray->header->ProductName );
	$node->field_product_image['und']['0'][value] 	  	= trim( $jsonArray->header->ProductImage );
	$node->field_brand['und']['0']['tid'] 		  	= trim($jsonArray->header->ProductBrand);
	$node->field_brand['und']['0']['tid'] 		  	= $BrandId;
	
	$node->field_mrpproductprice['und']['0'][value]	  	= trim($jsonArray->header->MRPProductPrice) ;
	//$node->field_mrpproductprice['und']['0'][value]	  	= 0 ;
	$expDate = explode('=' , $jsonArray->header->LastCheckedTime);	
	$node->field_lastcheckedtime['und']['0'][value]	  	= $expDate[0];
	$node->field_affiliateurl['und']['0'][value]	  	= trim( $jsonArray->header->AffiliateURL );
	$node->body['und']['0'][value]			  	= trim( $jsonArray->header->MetaDescription );
	///$node->metatag['und']['0']['data']			= trim( $jsonArray->header->MetaDescription );
	$node->field_best_coupon_description['und']['0'][value]	= trim( $jsonArray->header->bestCouponResult->CouponDesc );
	
	$node->field_best_coupon_status['und']['0'][value]	  	= trim( $jsonArray->header->CouponResult );
	/* FOR SAVING IF COUPON THEN SAVING VIA COUPON ELSE MRP - LISTING PRICE */
	$node->field_best_coupon_saving['und']['0'][value]	= ( $jsonArray->header->bestCouponResult->Saving)?$jsonArray->header->bestCouponResult->Saving:0;
	if ($node->field_best_coupon_status['und']['0'][value] == 1) {
		$node->field_best_coupon_status_display['und']['0'][value] = 'Guaranteed Coupons';
		$node->field_best_coupon_saving['und']['0'][value]	= ( $jsonArray->header->bestCouponResult->Saving)?$jsonArray->header->bestCouponResult->Saving:0;
	} else {
		$node->field_best_coupon_status_display['und']['0'][value] = 'Without Coupons';
		if ( $node->field_mrpproductprice['und']['0'][value] > $node->field_product_price['und']['0'][value]){
			$node->field_best_coupon_saving['und']['0'][value] = $node->field_mrpproductprice['und']['0'][value] - $node->field_product_price['und']['0'][value];
		}
	}
	//$node->field_product_popularity['und']['0'][value]	= ( $jsonArray->header->Popularity )?$jsonArray->header->Popularity:0;
	$node->field_product_popularity['und']['0'][value]	  	= $jsonArray->header->Popularity;
	
	///if($jsonArray->header->CouponResult == 1){
	  $node->field_best_coupon_couponcode['und']['0'][value] 	= trim( $jsonArray->header->bestCouponResult->CouponCode );
	  
	  
	  
	  
	  
	  
	  
	  $node->field_best_coupon_netpriceafters['und']['0'][value]= ( $jsonArray->header->bestCouponResult->NetPriceAfterSaving)?$jsonArray->header->bestCouponResult->NetPriceAfterSaving:0;
	  $node->field_best_coupon_url['und']['0'][value]		= trim( $jsonArray->header->bestCouponResult->url );
	//}
	//mail('sanjay.kumar1@mail.vinove.com','jsonArray','jsonArray--->'.print_r($jsonArray->data,1));
	$node->field_best_coupon_info['und']['0'][value]		= serialize( $jsonArray->data );
	
	//$node->	field_page_url['und']['0'][value]		= $Pageurl;
	
	/*$ImgPath = $jsonArray->header->ProductImage;
	$ImgFile = pathinfo($ImgPath);         // $file is set to "index.php"
	
	$image = file_get_contents($ImgPath); // string
	$file = file_save_data($image, 'public://'.$ImgFile['basename'] ,FILE_EXISTS_REPLACE);
	$node->field_product_images[LANGUAGE_NONE]['0']['fid'] = $file->fid;*/
	
	node_save($node);
	echo 'test before';
	$nid_noIndex = $node->nid;
	global $base_url;
	echo after;
	
	/*$urlAlias = $base_url.'/'.drupal_get_path_alias('node/'.$node->nid);
	
	$node2 = node_load( $node->nid );
	$node2->field_page_url['und']['0'][value] = $urlAlias;
	node_save($node2);
	*/
	if( !empty($node->nid) ){
	  $response = json_encode( array('ResponseCode' => '1', 'Response' => 'Node added.', 'URL' => $url, 'BASEURL' => $jsonArray->header->BaseUrl) );
	  echo $response;
	}else{
	  $response = json_encode( array('ResponseCode' => '4', 'Response' => 'Unexpected Error.') );
	  echo $response;
	}
	
      }elseif($record->expression == 1){
	 // echo 'update';
	
		/** ASHISH NODE CREATION TIMING  - UPDATE LOOP ENTERED
		$time1 = round(microtime(true)* 1000);
		echo 'Update Loop Entered: '.$time1;
	echo nl2br("\n");
		 -----------------------------------------   */

	
	$expDate = explode('=' , $jsonArray->header->LastCheckedTime);

	//check product exist or not
	$query = db_select('field_data_field_base_url', 'n')
		     ->fields('n', array('entity_id','field_base_url_value') )
		     ->condition('n.field_base_url_value', $baseUrl, '=');		   
	$result = $query->execute();
	$record = $result->fetch();

	$queryLastUpdate = db_select('field_data_field_lastcheckedtime', 'n')
		     ->fields('n', array('field_lastcheckedtime_value') )
		     ->condition('n.entity_id ', $record->entity_id , '=');		   
	$resultLastUpdate = $queryLastUpdate->execute();
	$recordLastUpdate = $resultLastUpdate->fetch();
	
	$lastUpdatedDate = $recordLastUpdate->field_lastcheckedtime_value;
	$nid_noIndex = $record->entity_id;
	global $base_url;
	  
	$urlAlias = $base_url.'/'.drupal_get_path_alias('node/'.$record->entity_id);
	
	if( $expDate[0] != $lastUpdatedDate){
	 // echo 'enter update loop';
  	  	/** ASHISH NODE CREATION TIMING  - LAST UPDATE URL
		$time1 = round(microtime(true)* 1000);
		echo 'Last Update Time Loop: '.$time1;
	echo nl2br("\n");
		 -----------------------------------------   */
  
	  
	  $node = node_load($record->entity_id);
//echo 'node load';


  	  	/** ASHISH NODE CREATION TIMING  - LAST UPDATE URL
		$time1 = round(microtime(true)* 1000);
		echo 'Node Loaded: '.$time1;
		echo nl2br("\n");
		 -----------------------------------------   */
	  if($_REQUEST['recheck'] != 1){
		$node->field_category['und'][0]['tid']			= trim( $jsonArray->header->Category );
		  db_query("UPDATE {field_data_field_category} SET field_category_tid = :categoryid WHERE revision_id = :vid", array(':categoryid' => trim( $jsonArray->header->Category ), ':vid' => $node->vid));
		  db_query("UPDATE {field_revision_field_category} SET field_category_tid = :categoryid WHERE revision_id = :vid", array(':categoryid' => trim( $jsonArray->header->Category ), ':vid' => $node->vid));
	} 
		$changed = time();
		db_query("UPDATE {node} SET title = :title, changed = :changed WHERE nid = :nid", array(':title' => $proTitle, ':changed' => $changed, ':nid' => $node->nid));
		db_query("UPDATE {node_revision} SET title = :title, timestamp = :changed WHERE vid = :vid", array(':title' => $proTitle, ':changed' => $changed, ':vid' => $node->vid));
  	  	/** ASHISH NODE CREATION TIMING  - LAST UPDATE URL
		$time1 = round(microtime(true)* 1000);
		echo 'Node Tables Updated: '.$time1;
		echo nl2br("\n");
		 -----------------------------------------   */
	  
		$field_product_price = $jsonArray->header->ListingProductPrice ?$jsonArray->header->ListingProductPrice:0;
		//if ($node->field_product_price['und']['0'][value]	!= $field_product_price) {
		db_query("UPDATE {field_data_field_product_price} SET field_product_price_value = :product_price WHERE revision_id = :vid", array(':product_price' => $field_product_price, ':vid' => $node->vid));
		db_query("UPDATE {field_revision_field_product_price} SET field_product_price_value = :product_price WHERE revision_id = :vid", array(':product_price' => $field_product_price, ':vid' => $node->vid));
		//}
		  
		$field_retailer_product_name = trim( $jsonArray->header->ProductName );
		$node->field_retailer['und']['0']['tid'] 		  	= $jsonArray->header->Retailer;
		$node->field_base_url['und']['0'][value] 		  	= trim( $jsonArray->header->BaseUrl);
		if ($node->field_retailer_product_name['und']['0'][value] 	!= $field_retailer_product_name ){
			db_query("UPDATE {field_data_field_retailer_product_name} SET field_retailer_product_name_value = :product_name WHERE revision_id = :vid", array(':product_name' => $field_retailer_product_name, ':vid' => $node->vid));
			db_query("UPDATE {field_revision_field_retailer_product_name} SET field_retailer_product_name_value = :product_name WHERE revision_id = :vid", array(':product_name' => $field_retailer_product_name, ':vid' => $node->vid));
		}
		 
		$node->field_product_image['und']['0'][value] 	  	= trim( $jsonArray->header->ProductImage );
		if ($node->field_brand['und']['0']['tid'] 		  	!= $BrandId){
			db_query("UPDATE {field_data_field_brand} SET field_brand_tid = :brandid WHERE revision_id = :vid", array(':brandid' => $BrandId, ':vid' => $node->vid));
			db_query("UPDATE {field_revision_field_brand} SET field_brand_tid = :brandid WHERE revision_id = :vid", array(':brandid' => $BrandId, ':vid' => $node->vid));
		}
		$field_mrpproductprice = trim($jsonArray->header->MRPProductPrice);
		if ($node->field_mrpproductprice['und']['0'][value]	!=$field_mrpproductprice   	 ){
			db_query("UPDATE {field_data_field_mrpproductprice} SET field_mrpproductprice_value = :mrpproductprice WHERE revision_id = :vid", array(':mrpproductprice' => $field_mrpproductprice, ':vid' => $node->vid));
			db_query("UPDATE {field_revision_field_mrpproductprice} SET field_mrpproductprice_value = :mrpproductprice WHERE revision_id = :vid", array(':mrpproductprice' => $field_mrpproductprice, ':vid' => $node->vid));
		}	
	  	/** ASHISH NODE CREATION TIMING  - LAST UPDATE URL
		$time1 = round(microtime(true)* 1000);
		echo 'MRP: '.$time1;
		echo nl2br("\n");
		 -----------------------------------------   */
		if($node->field_lastcheckedtime['und']['0'][value]	  	!= $expDate[0]){
			db_query("UPDATE {field_data_field_lastcheckedtime} SET field_lastcheckedtime_value = :lastcheckedtime WHERE revision_id = :vid", array(':lastcheckedtime' => $expDate[0], ':vid' => $node->vid));
			db_query("UPDATE {field_revision_field_lastcheckedtime} SET field_lastcheckedtime_value = :lastcheckedtime WHERE revision_id = :vid", array(':lastcheckedtime' => $expDate[0], ':vid' => $node->vid));
		}
		/** ASHISH NODE CREATION TIMING  - LAST UPDATE URL
		$time1 = round(microtime(true)* 1000);
		echo 'LAST CHECKED TIME: '.$time1;
		echo nl2br("\n");
		 -----------------------------------------   */
		$field_affiliateurl = trim( $jsonArray->header->AffiliateURL);
		if ($node->field_affiliateurl['und']['0'][value]	  	!= $field_affiliateurl ){
			db_query("UPDATE {field_data_field_affiliateurl} SET field_affiliateurl_value = :affiliate_url WHERE revision_id = :vid", array(':affiliate_url' =>$field_affiliateurl, ':vid' => $node->vid));
			db_query("UPDATE {field_revision_field_affiliateurl} SET field_affiliateurl_value = :affiliate_url WHERE revision_id = :vid", array(':affiliate_url' => $field_affiliateurl, ':vid' => $node->vid));
		}
		$node->body['und']['0'][value]			  	= trim( $jsonArray->header->MetaDescription );
		$field_best_coupon_description =trim( $jsonArray->header->bestCouponResult->CouponDesc);
		if ($node->field_best_coupon_description['und']['0'][value]	!= $field_best_coupon_description ){
			db_query("UPDATE {field_data_field_best_coupon_description} SET field_best_coupon_description_value = :best_coupon_description WHERE revision_id = :vid", array(':best_coupon_description' => trim( $jsonArray->header->bestCouponResult->CouponDesc ), ':vid' => $node->vid));
			db_query("UPDATE {field_revision_field_best_coupon_description} SET field_best_coupon_description_value = :best_coupon_description WHERE revision_id = :vid", array(':best_coupon_description' => trim( $jsonArray->header->bestCouponResult->CouponDesc ), ':vid' => $node->vid));
		}	
	  	/** ASHISH NODE CREATION TIMING  - LAST UPDATE URL
		$time1 = round(microtime(true)* 1000);
		echo 'COUPON DESCRIPTION: '.$time1;
		echo nl2br("\n");
		 -----------------------------------------   */
		$field_best_coupon_status = trim( $jsonArray->header->CouponResult);
		//if ($node->field_best_coupon_status['und']['0'][value]	!= $field_best_coupon_status ) {
			db_query("UPDATE {field_data_field_best_coupon_status} SET field_best_coupon_status_value = :field_best_coupon_status WHERE revision_id = :vid", array(':field_best_coupon_status' =>$field_best_coupon_status , ':vid' => $node->vid));
			db_query("UPDATE {field_revision_field_best_coupon_status} SET field_best_coupon_status_value = :field_best_coupon_status WHERE revision_id = :vid", array(':field_best_coupon_status' => $field_best_coupon_status, ':vid' => $node->vid));
		//	}
	/* FOR SAVING IF COUPON THEN SAVING VIA COUPON ELSE MRP - LISTING PRICE */
		$field_best_coupon_saving	= ( $jsonArray->header->bestCouponResult->Saving)?$jsonArray->header->bestCouponResult->Saving:0;
		if ($field_best_coupon_saving >0) {
			$field_best_coupon_status_display = 'Guaranteed Coupons';
			$field_best_coupon_saving	= ( $jsonArray->header->bestCouponResult->Saving)?$jsonArray->header->bestCouponResult->Saving:0;
		} else {
			$field_best_coupon_status_display = 'Without Coupons';
			if ( $field_mrpproductprice > $field_product_price){
				$field_best_coupon_saving = $field_mrpproductprice - $field_product_price;
			}
		}
		db_merge('field_data_field_best_coupon_status_display')
				->key(array('revision_id' => $node->vid))
				->fields(array(
				'field_best_coupon_status_display_value' => $field_best_coupon_status_display,
				'entity_id'=> $record->entity_id,
				'delta'=> 0,
				'entity_type'=> 'node',
				'bundle'=> '_product_and_coupon',
				'language'=>'und',
			))
			->execute();
		
	  	/** ASHISH NODE CREATION TIMING  - LAST UPDATE URL
		$time1 = round(microtime(true)* 1000);
		echo 'COUPON STATUS: '.$time1;
		echo nl2br("\n");
		 -----------------------------------------   */

		$node->field_product_popularity['und']['0'][value]	= $jsonArray->header->Popularity;
		$field_best_coupon_couponcode = trim( $jsonArray->header->bestCouponResult->CouponCode );
		if ($node->field_best_coupon_couponcode['und']['0'][value] 	!=$field_best_coupon_couponcode){
			db_query("UPDATE {field_data_field_best_coupon_couponcode} SET field_best_coupon_couponcode_value = :field_best_coupon_couponcode WHERE revision_id = :vid", array(':field_best_coupon_couponcode' => $field_best_coupon_couponcode, ':vid' => $node->vid));
			db_query("UPDATE {field_revision_field_best_coupon_couponcode} SET field_best_coupon_couponcode_value = :field_best_coupon_couponcode WHERE revision_id = :vid", array(':field_best_coupon_couponcode' => $field_best_coupon_couponcode, ':vid' => $node->vid));
		}
	  	/** ASHISH NODE CREATION TIMING  - LAST UPDATE URL
		$time1 = round(microtime(true)* 1000);
		echo 'COUPON CODE: '.$time1;
		echo nl2br("\n");
		 -----------------------------------------   */
		//if ($node->field_best_coupon_saving['und']['0'][value]	!= $field_best_coupon_saving){
			db_query("UPDATE {field_data_field_best_coupon_saving} SET field_best_coupon_saving_value = :field_best_coupon_saving WHERE revision_id = :vid", array(':field_best_coupon_saving' => $field_best_coupon_saving, ':vid' => $node->vid));
			db_query("UPDATE {field_revision_field_best_coupon_saving} SET field_best_coupon_saving_value = :field_best_coupon_saving WHERE revision_id = :vid", array(':field_best_coupon_saving' => $field_best_coupon_saving, ':vid' => $node->vid));
		//	}
		/** ASHISH NODE CREATION TIMING  - LAST UPDATE URL
		$time1 = round(microtime(true)* 1000);
		echo 'COUPON SAVING: '.$time1;
		echo nl2br("\n");
		 -----------------------------------------   */
		$field_best_coupon_netpriceafters = ( $jsonArray->header->bestCouponResult->NetPriceAfterSaving)?$jsonArray->header->bestCouponResult->NetPriceAfterSaving:0 ;
		if ($node->field_best_coupon_netpriceafters['und']['0'][value]!= $field_best_coupon_netpriceafters) {
    		db_query("UPDATE {field_data_field_best_coupon_netpriceafters} SET field_best_coupon_netpriceafters_value = :field_best_coupon_netpriceafters WHERE revision_id = :vid", array(':field_best_coupon_netpriceafters' => $field_best_coupon_netpriceafters, ':vid' => $node->vid));
			db_query("UPDATE {field_revision_field_best_coupon_netpriceafters} SET field_best_coupon_netpriceafters_value = :field_best_coupon_netpriceafters WHERE revision_id = :vid", array(':field_best_coupon_netpriceafters' => $field_best_coupon_netpriceafters, ':vid' => $node->vid));
		}
	  	/** ASHISH NODE CREATION TIMING  - LAST UPDATE URL
		$time1 = round(microtime(true)* 1000);
		echo 'NETRICE: '.$time1;
		echo nl2br("\n");
		 -----------------------------------------   */
	
		$field_best_coupon_url = trim( $jsonArray->header->bestCouponResult->url );
		if ($node->field_best_coupon_url['und']['0'][value]		!= $field_best_coupon_url ) {
			db_query("UPDATE {field_data_field_best_coupon_url} SET field_best_coupon_url_value = :best_coupon_url WHERE revision_id = :vid", array(':best_coupon_url' => $field_best_coupon_url, ':vid' => $node->vid));
			db_query("UPDATE {field_revision_field_best_coupon_url} SET field_best_coupon_url_value = :best_coupon_url WHERE revision_id = :vid", array(':best_coupon_url' => $field_best_coupon_url, ':vid' => $node->vid));
		}
	  	/** ASHISH NODE CREATION TIMING  - LAST UPDATE URL
		$time1 = round(microtime(true)* 1000);
		echo 'BEST COUPON URL : '.$time1;
		echo nl2br("\n");
		 -----------------------------------------   */
	
		$data = serialize( $jsonArray->data );
		if ($node->field_best_coupon_info['und']['0'][value] != $data){
			db_query("UPDATE {field_data_field_best_coupon_info} SET field_best_coupon_info_value = :best_coupon_info WHERE revision_id = :vid", array(':best_coupon_info' => $data, ':vid' => $node->vid));
			db_query("UPDATE {field_revision_field_best_coupon_info} SET field_best_coupon_info_value = :best_coupon_info WHERE revision_id = :vid", array(':best_coupon_info' => $data, ':vid' => $node->vid));
		}
	  	/** ASHISH NODE CREATION TIMING  - LAST UPDATE URL
		$time1 = round(microtime(true)* 1000);
		echo 'All Coupon Info Update: '.$time1;
		echo nl2br("\n");
		 -----------------------------------------   */
	
		//MARK PRODUCT FOR INDEXING ON APACHE 
				apachesolr_mark_entity ('node', $node->nid);

 	  	/** ASHISH NODE CREATION TIMING  - Node Data
		$time1 = round(microtime(true)* 1000);
		echo 'Marked for SOLR: '.$time1;
		echo nl2br("\n");
		 -----------------------------------------   */				
		//UPDATE SITEMAP
				xmlsitemap_node_node_update($node);
	 
 	  	/** ASHISH NODE CREATION TIMING  - Node Data
		$time1 = round(microtime(true)* 1000);
		echo 'Marked for SITEMAP: '.$time1;
		echo nl2br("\n");
		 -----------------------------------------   */
	if( !empty($node->nid) ){
	    $response = json_encode( array('ResponseCode' => '2', 'Response' => 'Node Updated.', 'URL' => $url, 'BASEURL' => $jsonArray->header->BaseUrl) );
	    echo $response;
		if($_REQUEST['recheck'] == 1){
			drupal_flush_all_caches();
			cache_clear_all('field:node:' . $node->nid, 'cache_field');
			drupal_goto($node_url);
		}
	}else{
		$response = json_encode( array('ResponseCode' => '4', 'Response' => 'Unexpected Error.') );
		echo $response;
	}
 	  	/** ASHISH NODE CREATION TIMING  - End Process*/
	/*	$time1 = round(microtime(true)* 1000);
		echo 'End Process: '.$time1;
		echo nl2br("\n");
		echo nl2br("\n");
			echo '___________________________________________'    ;
	*/	
		/** -----------------------------------------   */
}else{
    $response = json_encode( array('ResponseCode' => '3', 'Response' => 'Node Ignored - Node Already Updated.', 'NodeId' => $jsonArray->header->BaseUrl) );
    echo $response;	    
}
}	
	echo 'nid_noIndex '.$nid_noIndex;
	echo 'pName: '.trim( $jsonArray->header->ProductName );
	echo 'rId: '.$jsonArray->header->Retailer;
    } 
    /*end here*/   
}   
} 

/** START OF BY ASHISH TO MODIFY SEARCH RESULTS BY BOOSTING ON COUPON STATUS AND LAST CHECKED, HIDE WHERE LAST CHECKED IS GREATER THAN THRESHHOLD*/
function custom_api_apachesolr_query_prepare(DrupalSolrQueryInterface $query) {
   $current_time= time();
   $boost_time=$current_time-(10*3600);
   $hide_time=$current_time-(10*3600);
   $solr_boost_time=gmdate('Y-m-d\TH:i:s\Z', $boost_time);
   $solr_hide_time=gmdate('Y-m-d\TH:i:s\Z', $hide_time);
   $solr_time_coupon_boost= "'(itm_field_best_coupon_status:1 AND dm_field_lastcheckedtime:[".$solr_boost_time." TO *])^2'";
  // $solr_time_coupon_boost= "'(dm_field_lastcheckedtime:[".$solr_boost_time." TO *])^2'";
   $solr_hide_time_coupon="dm_field_lastcheckedtime:[".$solr_hide_time." TO *]";
   $query->addParam('fq', $solr_hide_time_coupon);
   $query->addParam('fq', '-(sm_vid_Retailer:Snapdeal.com)');
   $query->addParam('bq', $solr_time_coupon_boost);
   $query->addParam('fq', $solr_hide_time_coupon);
   global $user;
	if ($user->uid != 1) {
		$solr_hide_negative="itm_field_best_coupon_netpriceaf:[1 TO *]";
		$query->addParam('fq', $solr_hide_negative);
	};
  // $query->addFilter('sm_field_retailer_product_name', $VALUE);
   
	$termid = arg(2);
	$term = taxonomy_term_load($termid);
	$vid = $term->vid;

/** BY ASHISH TO SORT BRAND AND CATEGORIES BY SAVINGS*/
/*
if ($vid == 3 OR $vid == 4){
		$query->addParam('sort', 'its_field_best_coupon_saving desc');
	}
*/ 
/**  BY ASHISH TO RANDOMIZE FOR RETAILER*/

	$seed = rand(1, 1000);
	if ($vid == 2 || $vid == 3 || $vid == 4){
		$query->addParam('sort', 'random_'.$seed.' asc');
  }
}

 function custom_api_entity_should_index($entity, $type) {
//  $info = entity_get_info($type);
// list($id, $vid, $bundle) = entity_extract_ids($type, $entity);

//  if ($bundle && isset($info['bundles'][$bundle]['apachesolr']['index']) && $info['bundles'][$bundle]['apachesolr']['index']) {
//    return TRUE;
//  }
  return FALSE;
}


/** Function to get result from Predictor API**/
function predictor_json($retailer_name,$brand,$category_id,$mrp,$list_price,$result_type){ // result_type has 2 type: full, bc
	if ($mrp == 0) {
		$mrp = $list_price;
	}
	$run = 0;
	If ( $mrp >= $list_price && $mrp > 0 && $list_price > 0 && $retailer_name !='' && $brand !='' && $category_id != '' && $run = 1){
		If ( strtolower($retailer_name) == 'jabong' || strtolower($retailer_name) == 'myntra') {
			$sid = $retailer_name.'-'.$brand.'-'.$category_id;
			$url_api = "http://plugin.theshoppingpro.com/cpnVodo/simulation/updateOldUrlsApi.php?sid=".urlencode($sid)."&mrp=".urlencode($mrp)."&listPrice=".urlencode($list_price)."&type=".urlencode($result_type);
//			echo $url_api;
//			echo nl2br("\n");
			$json = drupal_http_request($url_api, array('timeout' => 600.0));
			$json = $json->data;
//			echo 'json';
//			echo nl2br("\n");
			return $json;
			
		} Else {
//			echo 'error';
//			echo nl2br("\n");
			Return 'error';				
		}
	} Else {
//		echo 'error2';
//		echo nl2br("\n");
		return 'error';			
	}
}