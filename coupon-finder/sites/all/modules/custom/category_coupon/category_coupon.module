<?php
/* CREATING AN API FOR UPDATE OF RETAILER COUPON NODES*/
function category_coupon_menu() {
  $items = array();
  $items['add-coupon/%'] = array(//this creates a URL that will call this form at "examples/form-example"
      'title' => 'Add Coupons in database', //page title
      'page callback' => 'category_coupon_addcoupon', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
      'page arguments' => array(1),
      'access callback' => TRUE
  ); 

  return $items;
}


/* FUNCTION THAT THE RETAILER API CALLS TO CREATE / UPDATE  REATILER COUPON*/
function category_coupon_addcoupon($CouponInfo){
//$retailer = reset(explode('_',$_REQUEST['retailer']));
//$retailer = reset(explode('_',$urlParam));
	$url = "http://54.243.150.171/cpnVodo/nodecreation/catCpnPageNct.php"; //The API TO GET ALL RETAILER COUPON DATA 
	$json = drupal_http_request($url, array('timeout' => 600.0));
   	$json = $json->data;
    $jsonArr = json_decode($json,true);
	echo 'Array Size ------->'.sizeof($jsonArr);
	// LOOP TO PROCESS EACH RETAILER COUPON RECORD RECEIVED VIA THE API
	foreach($jsonArr as $json){ 
		$json = json_encode($json); 
    	$jsonData = preg_replace("/[\\n\\r]+/", " ", $json);
    	$jsonArray = json_decode($jsonData);
		// var_dump($json);
    	// ASSIGN ALL COUPON DATA TO VARIABLES
		$couponInfo = $jsonArray->couponInfo;
		$retailer = trim($couponInfo->Retailer);
    	$retailerId = trim($couponInfo->RetailerId);
    	$lastCheckedTime = trim($couponInfo->LastCheckedTime);
    	$couponCode = trim($couponInfo->CouponCode);
    	$couponTitle = trim($couponInfo->CouponTitle);
    	$couponCodeDesc = trim($couponInfo->CouponCodeDesc);
    	$status = trim($couponInfo->Status);
    	$weight = trim($couponInfo->weight);
		$catUrl = trim($couponInfo->CategoryUrl);
		$catID = trim($couponInfo->CategoryId);
		
		//CHECK IF NODE EXISTS (INCASE OF COUPONS CHECK VIA COUPON CODE AND RETAILER ID ELSE VIA COUPON TITLE AND RETAILER ID
		//echo "offer type: ".$offerType;
		
		$query = new EntityFieldQuery();
		$query->entityCondition('entity_type', 'node')
		->entityCondition('bundle', 'category_coupon_page')
		->fieldCondition('field_category', 'tid', $catID, '=')
		->fieldCondition('field_coupon_code', 'value', $couponCode, '=');
		// ->fieldCondition('field_coupon_title', 'value', $couponTitle, '='); // ENSURING COUPON IS UNIQUE THIS MEANS THAT LAST INSTANCE OF THE COUPON WILL GO LIVE - RECHECK IF THATS OK
		
		$result = $query->execute();
		$nids = array_keys($result['node']);
		 var_dump($nids); //COMMENT THIS POST TEXTING
		// echo $nids[0]; // COMMENT THIS POST TESTING
	  
	  
    	if (empty($result['node'])) {
			// CREATING NODE SINCE IT DOES NOT EXIST	
			$node = new stdClass();
			echo 'inside new';			
	        $node->language = 'und';
			$node->type     = 'category_coupon_page';
			$node->uid      = 1; 
		}
		else {
			// LOADING THE IDENTIFIED NODE & DELETING ALL CATEGORY LINK VALUES
			echo 'inside update';
			var_dump($nids[0]);
			$node = node_load($nids[0]);
			
		}
		// COMMON PROCESS FOR UPDATE AND NEW NODE SINCE NODE IS NOW IDENTIFIED / CREATED
		// PUSHING IN MAIN DATA (I.E. ALL EXCEPT CATEGORY LINKS) 
		$node->title = $couponTitle.' @ '.ucfirst($retailer);
		$node->body = $couponTitle.' @ '.$retailer;
		$node->field_baseurl_coupon['und']['0']['value']			= $catUrl;
		$node->field_retailer['und'][0][tid]			= $retailerId;
		$node->field_coupon_code['und']['0']['value']			= $couponCode;
		
		$node->field_coupon_title['und']['0']['value']			= $couponTitle;
		
		$node->field_coupon_description['und']['0']['value']			= $couponCodeDesc;
		$node->field_affiliate_url['und']['0']['value']			= $catUrl;
		$node->field_weight['und']['0']['value']			= $weight;
		$node->field_status['und']['0']['value']			= $status;
		//$node->field_affiliate_url['und']['0']['value']			= $catUrl;
		// PUSHING IN CATEGORY LINKS 
				
    		} 
		node_save($node);
		echo 'node saved';
    }
echo 'No node to process';
}

function category_coupon_cron(){
$i = 0;
	$tables = array("predictorCompiledResultTable", "predictorCompiledResultTableAmazon", "predictorCompiledResultTableFlipkart", "predictorCompiledResultTableSnapdeal");
	
	for($x=0;$x<count($tables);$x++) {
	
	$table=$tables[$x];
	echo $table;
	$Query = db_select('1Variables', 'b')
				 ->fields('b', array('Status') )
				 ->condition('b.Variable', 'Insert_'.$table, '=');
	$run_check = $Query->execute();
	$run_check_fetch = $run_check->fetch();
	$isFirstRun = $run_check_fetch->Status;
	
 
	$run = 1;
    echo $isFirstRun;
	If ($isFirstRun == 1) {
	    $dmp=$table."Dmp";
		$insert='Insert_'.$table;
		$update='Update_'.$table;
		db_query("Truncate table coupon_finder.".$dmp);
		db_query("insert into coupon_finder.".$dmp." select * from coupon_finder.".$table);
		db_query("Truncate table coupon_finder.".$table);
		db_query("UPDATE coupon_finder.1Variables SET Status = 2, Ref_Value = '".gmdate('Y-m-d\TH:i:s\Z', time())."' WHERE Variable = '".$insert."'");
	}

	
	If ($isFirstRun == 2  ) {
	    
		// return 'dont run';
//		exit;
$run=2;
	}
	
	while ($run ==1) {
	echo 'inside';
		$i++;
		$url = "http://54.243.150.171/cpnVodo/SimulationWithoutAutomatn/pustToMySql.php?q=".$table; //The API TO GET ALL RETAILER COUPON DATA 
		$json = drupal_http_request($url, array('timeout' => 1200.0));
		//var_dump($json);
		$json = $json->data;
		if ($json != 'null') {
			//if ($i == 1) {mail('team@theshoppingpro.com', 'Data Push Start for '.$table, gmdate('Y-m-d\TH:i:s\Z', (time()+(5.5*3600))));}
			$jsonArr = json_decode($json,true);
			foreach($jsonArr as $json){ 
				$json = json_encode($json); 
				$jsonData = preg_replace("/[\\n\\r]+/", " ", $json);
				$jsonArray = json_decode($jsonData);
			
				$id= trim($jsonArray->id);
				$baseUrl= trim($jsonArray->BaseUrl);
				$listPrice= trim($jsonArray->listPrice);
				$MRP= trim($jsonArray->MRP);
				$Saving= trim($jsonArray->Saving);
				$NetPrice= trim($jsonArray->NetPrice);
				$BestCouponCode= trim($jsonArray->BestCouponCode);
				$BestCouponDesc= trim($jsonArray->BestCouponDesc);
				$result= trim($jsonArray->result);
				$entity_id= null;
				$brand= trim($jsonArray->brand);
				$ProductName= trim($jsonArray->ProductName);
				$ProductImage= trim($jsonArray->ProductImage);
				$Category= trim($jsonArray->Category);
				$LastCheckTime= trim($jsonArray->LastCheckTime);
				$pagetitle= trim($jsonArray->pagetitle);
				$BestCouponStatus= trim($jsonArray->BestCouponStatus);
				$BrandId= null;
				$loc= null;
				$retailer= trim($jsonArray->retailer);
				$retailerId= trim($jsonArray->retailerId);
				$bestCouponDisplay= trim($jsonArray->bestCouponDisplay);
				$uniq=trim($jsonArray->uniq);
				$nid = db_insert($table) // Table name no longer needs {}
				->fields(array(
				  'id' => $id,
				  'BaseUrl' => $baseUrl,
				  'ListPrice' => $listPrice,
				  'MRP' => $MRP,
				  'Saving' => $Saving,
				  'NetPrice' => $NetPrice,
				  'BestCouponCode' => $BestCouponCode,
				  'BestCouponDesc' => $BestCouponDesc,
				  'Result' => $result,
				  'entity_id' => $entity_id,
				  'Brand' => $brand,
				  'ProductName' => $ProductName,
				  'ProductImage' => $ProductImage,
				  'Category' => $Category,
				  'LastCheckTime' => $LastCheckTime,
				  'pagetitle' => $pagetitle,
				  'BestCouponStatus' => $BestCouponStatus,
				  'BrandId' => $BrandId,
				  'loc' => $loc,
				  'Retailer' => $retailer,
				  'RetailerId' => $retailerId,
				  'BestCouponDisplay' => $bestCouponDisplay,
				  'uniq'=>$uniq,
				))
				->execute();
				
			}
		} Else {
			// no urls to process
			$run = 0;
			if($i!=1) {
				
				db_query("UPDATE coupon_finder.1Variables SET Status = 1, Ref_Value = '".gmdate('Y-m-d\TH:i:s\Z', time())."' WHERE Variable = '".$update."'");
				db_query("UPDATE coupon_finder.1Variables SET Status = 3, Ref_Value = '".gmdate('Y-m-d\TH:i:s\Z', time())."' WHERE Variable = '".$insert."'"); 
		//		exit;
			} else {
				//mail('team@theshoppingpro.com', 'Data Push Did Not Run', gmdate('Y-m-d\TH:i:s\Z', (time()+(5.5*3600))));
			}
		}
}
}
if ($i>5){
mail('team@theshoppingpro.com', 'Data Push Ended With '.$i.' loops', gmdate('Y-m-d\TH:i:s\Z', (time()+(5.5*3600))));
}
}